from utils.io import load_all_vacancies, load_criteria_bank, save_json, generate_next_id
from models.candidate_response import CandidateResponse
from models.candidate import Candidate
import os

def run_candidate_cli():
    base_path = "data"

    # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—è ID –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
    cid = generate_next_id(os.path.join(base_path, "candidates"), "C")
    print(f"\n–í–∞—à ID: {cid}")
    responses = {}

    print("\nüë§ –ê–Ω–∫–µ—Ç—É–≤–∞–Ω–Ω—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞")

    # –ó–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤–∞–∫–∞–Ω—Å—ñ–π —ñ –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤
    vacancies = load_all_vacancies(os.path.join(base_path, "vacancies"))
    criteria_bank = load_criteria_bank(os.path.join(base_path, "criteria_bank"))

    # –í–∏–±—ñ—Ä –≤–∞–∫–∞–Ω—Å—ñ—ó –∑–∞ –Ω–æ–º–µ—Ä–æ–º
    print("–î–æ—Å—Ç—É–ø–Ω—ñ –≤–∞–∫–∞–Ω—Å—ñ—ó:")
    for i, v in enumerate(vacancies, 1):
        print(f"{i}. {v.title} ({v.id})")
    while True:
        selected = input("–û–±–µ—Ä—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞–∫–∞–Ω—Å—ñ—ó: ").strip()
        if selected.isdigit() and 1 <= int(selected) <= len(vacancies):
            vacancy = vacancies[int(selected) - 1]
            break
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

    # –í–∏–≤–µ–¥–µ–Ω–Ω—è –æ–ø–∏—Å—É –≤–∞–∫–∞–Ω—Å—ñ—ó
    print(f"\n–í–∏ –æ–±—Ä–∞–ª–∏ –≤–∞–∫–∞–Ω—Å—ñ—é \"{vacancy.title}\", –≤–æ–Ω–∞ –º–∞—î {len(vacancy.get_criteria_ids())} –∫—Ä–∏—Ç–µ—Ä—ñ—ó–≤.")
    criteria_ids = vacancy.get_criteria_ids()

    # –ü—Ä–æ—Ö–æ–¥–∂–µ–Ω–Ω—è –∞–Ω–∫–µ—Ç–∏
    for idx, crit_id in enumerate(criteria_ids, 1):
        if not vacancy.is_criterion_used(crit_id):
            continue

        crit = criteria_bank[crit_id]
        print(f"\n–ö—Ä–∏—Ç–µ—Ä—ñ–π {idx} –∑ {len(criteria_ids)}: {crit_id}")
        print(f"–ü–∏—Ç–∞–Ω–Ω—è: {crit.question} (—Ç–∏–ø: {crit.type})")

        if crit.type == "category" and crit.options:
            options_list = list(crit.options.keys())
            print("–ú–æ–∂–ª–∏–≤—ñ –≤–∞—Ä—ñ–∞–Ω—Ç–∏:")
            for opt_idx, opt in enumerate(options_list, 1):
                print(f"{opt_idx}. {opt}")
            while True:
                selected = input("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –≤–∞—Ä—ñ–∞–Ω—Ç–∞: ").strip()
                if selected.isdigit() and 1 <= int(selected) <= len(options_list):
                    raw = options_list[int(selected) - 1]
                    break
                else:
                    print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        elif crit.type == "scale" and crit.options:
            print("–í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ 1 –¥–æ 5:")
            while True:
                raw = input("‚Üí ").strip()
                if raw.isdigit() and raw in crit.options:
                    break
                else:
                    print("‚ùå –ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 5.")

        else:
            raw = input("‚Üí ")

        # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
        if crit.type in ["scale", "category"]:
            score = crit.normalize_answer(raw)
            responses[crit_id] = CandidateResponse(crit_id, crit.type, raw, score, "scored")
        else:
            responses[crit_id] = CandidateResponse(crit_id, crit.type, raw, None, "pending")

    # –ó–±–µ—Ä–µ–∂–µ–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    candidate = Candidate(cid, responses)
    out_path = os.path.join(base_path, "candidates", f"{cid}.json")
    save_json(candidate.to_dict(), out_path)
    print(f"\n‚úÖ –ê–Ω–∫–µ—Ç–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ {cid} –∑–±–µ—Ä–µ–∂–µ–Ω–∞ —É {out_path}")
