# from utils.io import (
#     load_all_candidates, load_all_vacancies, load_criteria_bank,
#     save_json, load_json, generate_next_id
# )
# from models.recruiter import Recruiter
# from models.vacancy import Vacancy
# from models.criteria import Criteria
# from models.scoring import Scoring
# import os
#
#
# def create_new_criterion():
#     print("\nüìã –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä—ñ—é")
#
#     cid = input("–ù–∞–∑–≤–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—é: ").strip()
#     question = input("–¢–µ–∫—Å—Ç –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: ").strip()
#
#     print("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—Ä–∏—Ç–µ—Ä—ñ—é:")
#     type_options = ["scale", "category", "manual"]
#     for i, t in enumerate(type_options, 1):
#         print(f"{i}. {t}")
#     while True:
#         t_index = input("‚Üí ").strip()
#         if t_index.isdigit() and 1 <= int(t_index) <= len(type_options):
#             ctype = type_options[int(t_index) - 1]
#             break
#         else:
#             print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –í–≤–µ–¥—ñ—Ç—å 1, 2 –∞–±–æ 3.")
#
#     options = None
#
#     if ctype == "category":
#         print("–í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ —ó—Ö –æ—Ü—ñ–Ω–∫–∏ –≤—ñ–¥ 0 –¥–æ 1. Enter ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–∏:")
#         options = {}
#         while True:
#             label = input("–í–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ").strip()
#             if not label:
#                 break
#             while True:
#                 score_input = input(f"–û—Ü—ñ–Ω–∫–∞ –¥–ª—è '{label}': ").strip()
#                 try:
#                     score = float(score_input)
#                     if 0.0 <= score <= 1.0:
#                         options[label] = score
#                         break
#                     else:
#                         print("‚ùå –û—Ü—ñ–Ω–∫–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 0.0 –¥–æ 1.0")
#                 except ValueError:
#                     print("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 0.5)")
#
#     elif ctype == "scale":
#         print("–©–æ –∫—Ä–∞—â–µ: –±—ñ–ª—å—à–∞ –æ—Ü—ñ–Ω–∫–∞ —á–∏ –º–µ–Ω—à–∞?")
#         print("1. –ë—ñ–ª—å—à–∞")
#         print("2. –ú–µ–Ω—à–∞")
#         while True:
#             direction = input("‚Üí ").strip()
#             if direction == "1":
#                 options = {str(i): round(i * 0.2, 2) for i in range(1, 6)}
#                 break
#             elif direction == "2":
#                 options = {str(i): round(1.2 - i * 0.2, 2) for i in range(1, 6)}
#                 break
#             else:
#                 print("‚ùå –í–≤–µ–¥—ñ—Ç—å 1 –∞–±–æ 2")
#
#     # manual: options = None
#
#     crit = Criteria(cid, question, ctype, options)
#     path = os.path.join("data", "criteria_bank", f"{cid}.json")
#     save_json(crit.to_dict(), path)
#     print(f"‚úÖ –ö—Ä–∏—Ç–µ—Ä—ñ–π '{cid}' –¥–æ–¥–∞–Ω–æ.")
#     return cid
#
#
# # def finalize_vacancy(vid, title, active_criteria):
# #     vacancy = Vacancy(vid, title, active_criteria)
# #     save_json(vacancy.to_dict(), os.path.join("data", "vacancies", f"{vid}.json"))
# #     print(f"‚úÖ –í–∞–∫–∞–Ω—Å—ñ—é {vid} –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
#
# def finalize_vacancy(vid, title, active_criteria, recruiter_id):
#     vacancy = Vacancy(vid, title, active_criteria, recruiter_id)
#     save_json(vacancy.to_dict(), os.path.join("data", "vacancies", f"{vid}.json"))
#     print(f"‚úÖ –í–∞–∫–∞–Ω—Å—ñ—é {vid} –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
#
#
# # def create_new_vacancy():
# #     vid = generate_next_id("data/vacancies", "V")
# #     print(f"\nID –≤–∞–∫–∞–Ω—Å—ñ—ó: {vid}")
# #     print(f"\nüìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≤–∞–∫–∞–Ω—Å—ñ—ó")
# #     title = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞–∫–∞–Ω—Å—ñ—ó: ").strip()
# #
# #     criteria_bank = load_criteria_bank("data/criteria_bank")
# #     active_criteria = {}
# #
# #     while True:
# #         while True:
# #             print("\n–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ–π, —è–∫–∏–º –º–∞—î –≤–æ–ª–æ–¥—ñ—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç:")
# #             all_criteria = list(criteria_bank.items())  # (cid, Criteria)
# #             for i, (cid, crit_obj) in enumerate(all_criteria, 1):
# #                 print(f"{i}. {cid} ({crit_obj.type})")
# #             print("0. ‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫—Ä–∏—Ç–µ—Ä—ñ–π")
# #             print("q. ‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∞–∫–∞–Ω—Å—ñ—ó")
# #
# #             choice = input("‚Üí ").strip().lower()
# #             if choice == "0":
# #                 new_id = create_new_criterion()
# #                 criteria_bank = load_criteria_bank("data/criteria_bank")
# #                 continue
# #
# #             elif choice == "q":
# #                 if not active_criteria:
# #                     print("‚ö† –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∞–∫–∞–Ω—Å—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä—ñ—é.")
# #                     return
# #                 else:
# #                     return finalize_vacancy(vid, title, active_criteria)
# #
# #             elif choice.isdigit() and 1 <= int(choice) <= len(all_criteria):
# #                 selected_crit = all_criteria[int(choice) - 1]
# #                 cid = selected_crit[0]
# #                 crit = selected_crit[1]
# #
# #                 print(f"\nüìå –ö—Ä–∏—Ç–µ—Ä—ñ–π: {cid}")
# #                 print(f"–¢–∏–ø: {crit.type}")
# #                 print(f"–ü–∏—Ç–∞–Ω–Ω—è: {crit.question}")
# #                 if crit.options:
# #                     print("–í–∞—Ä—ñ–∞–Ω—Ç–∏ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è:")
# #                     for k, v in crit.options.items():
# #                         print(f"- {k}: {v}")
# #
# #                 print("\n–©–æ –∑—Ä–æ–±–∏—Ç–∏?")
# #                 print("1. –î–æ–¥–∞—Ç–∏ —Ü–µ–π –∫—Ä–∏—Ç–µ—Ä—ñ–π –¥–æ –≤–∞–∫–∞–Ω—Å—ñ—ó")
# #                 print("2. –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ —Å–ø–∏—Å–∫—É")
# #
# #                 while True:
# #                     act = input("‚Üí ").strip()
# #                     if act == "1":
# #                         while True:
# #                             weight_input = input("–í–∞–≥–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—é (1‚Äì5): ").strip()
# #                             if weight_input.isdigit() and 1 <= int(weight_input) <= 5:
# #                                 weight = int(weight_input)
# #                                 break
# #                             else:
# #                                 print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 5.")
# #                         active_criteria[cid] = {"active": 1, "weight": weight}
# #                         break
# #                     elif act == "2":
# #                         break
# #                     else:
# #                         print("‚ùå –í–≤–µ–¥—ñ—Ç—å 1 –∞–±–æ 2.")
# #                 if act == "1":
# #                     break  # –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Ü–∏–∫–ª, –ø–µ—Ä–µ–π—Ç–∏ –¥–æ "–î–æ–¥–∞—Ç–∏ —â–µ?"
# #             else:
# #                 print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")
# #                 continue
# #
# #         print("\n–î–æ–¥–∞—Ç–∏ —â–µ –∫—Ä–∏—Ç–µ—Ä—ñ–π?")
# #         print("1. –¢–∞–∫")
# #         print("2. –ù—ñ")
# #         while True:
# #             cont = input("‚Üí ").strip()
# #             if cont == "1":
# #                 break
# #             elif cont == "2":
# #                 return finalize_vacancy(vid, title, active_criteria)
# #             else:
# #                 print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –í–≤–µ–¥—ñ—Ç—å 1 –∞–±–æ 2.")
#
# def create_new_vacancy(recruiter):
#     vid = generate_next_id("data/vacancies", "V")
#     print(f"\nID –≤–∞–∫–∞–Ω—Å—ñ—ó: {vid}")
#     print(f"\nüìù –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –Ω–æ–≤–æ—ó –≤–∞–∫–∞–Ω—Å—ñ—ó")
#     title = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞–∫–∞–Ω—Å—ñ—ó: ").strip()
#
#     criteria_bank = load_criteria_bank("data/criteria_bank")
#     active_criteria = {}
#
#     while True:
#         while True:
#             print("\n–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ–π, —è–∫–∏–º –º–∞—î –≤–æ–ª–æ–¥—ñ—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç:")
#             all_criteria = list(criteria_bank.items())  # (cid, Criteria)
#             for i, (cid, crit_obj) in enumerate(all_criteria, 1):
#                 print(f"{i}. {cid} ({crit_obj.type})")
#             print("0. ‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π –∫—Ä–∏—Ç–µ—Ä—ñ–π")
#             print("q. ‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∞–∫–∞–Ω—Å—ñ—ó")
#
#             choice = input("‚Üí ").strip().lower()
#             if choice == "0":
#                 new_id = create_new_criterion()
#                 criteria_bank = load_criteria_bank("data/criteria_bank")
#                 continue
#
#             elif choice == "q":
#                 if not active_criteria:
#                     print("‚ö† –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤–∞–∫–∞–Ω—Å—ñ—ó —Å–∫–∞—Å–æ–≤–∞–Ω–æ, –æ—Å–∫—ñ–ª—å–∫–∏ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä—ñ—é.")
#                     return
#                 else:
#                     return finalize_vacancy(vid, title, active_criteria, recruiter.id)
#
#             elif choice.isdigit() and 1 <= int(choice) <= len(all_criteria):
#                 selected_crit = all_criteria[int(choice) - 1]
#                 cid = selected_crit[0]
#                 crit = selected_crit[1]
#
#                 print(f"\nüìå –ö—Ä–∏—Ç–µ—Ä—ñ–π: {cid}")
#                 print(f"–¢–∏–ø: {crit.type}")
#                 print(f"–ü–∏—Ç–∞–Ω–Ω—è: {crit.question}")
#                 if crit.options:
#                     print("–í–∞—Ä—ñ–∞–Ω—Ç–∏ –æ—Ü—ñ–Ω—é–≤–∞–Ω–Ω—è:")
#                     for k, v in crit.options.items():
#                         print(f"- {k}: {v}")
#
#                 print("\n–©–æ –∑—Ä–æ–±–∏—Ç–∏?")
#                 print("1. –î–æ–¥–∞—Ç–∏ —Ü–µ–π –∫—Ä–∏—Ç–µ—Ä—ñ–π –¥–æ –≤–∞–∫–∞–Ω—Å—ñ—ó")
#                 print("2. –ü–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ —Å–ø–∏—Å–∫—É")
#
#                 while True:
#                     act = input("‚Üí ").strip()
#                     if act == "1":
#                         while True:
#                             weight_input = input("–í–∞–≥–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—é (1‚Äì5): ").strip()
#                             if weight_input.isdigit() and 1 <= int(weight_input) <= 5:
#                                 weight = int(weight_input)
#                                 break
#                             else:
#                                 print("‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è. –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 5.")
#                         active_criteria[cid] = {"active": 1, "weight": weight}
#                         break
#                     elif act == "2":
#                         break
#                     else:
#                         print("‚ùå –í–≤–µ–¥—ñ—Ç—å 1 –∞–±–æ 2.")
#                 if act == "1":
#                     break  # –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –≤–Ω—É—Ç—Ä—ñ—à–Ω—ñ–π —Ü–∏–∫–ª, –ø–µ—Ä–µ–π—Ç–∏ –¥–æ "–î–æ–¥–∞—Ç–∏ —â–µ?"
#             else:
#                 print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")
#                 continue
#
#         print("\n–î–æ–¥–∞—Ç–∏ —â–µ –∫—Ä–∏—Ç–µ—Ä—ñ–π?")
#         print("1. –¢–∞–∫")
#         print("2. –ù—ñ")
#         while True:
#             cont = input("‚Üí ").strip()
#             if cont == "1":
#                 break
#             elif cont == "2":
#                 return finalize_vacancy(vid, title, active_criteria, recruiter.id)
#             else:
#                 print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä. –í–≤–µ–¥—ñ—Ç—å 1 –∞–±–æ 2.")
#
#
# def evaluate_candidates(recruiter):
#     candidates = load_all_candidates("data/candidates")
#     vacancies = load_all_vacancies("data/vacancies")
#     relevant_criteria = set()
#
#     for v in vacancies:
#         if v.recruiter_id == recruiter.id:
#             relevant_criteria.update(v.get_criteria_ids())
#
#     updated = False
#     for c in candidates:
#         for r in c.responses.values():
#             if r.is_pending() and r.criterion_id in relevant_criteria:
#                 print(f"\n–ö–∞–Ω–¥–∏–¥–∞—Ç {c.id}, –∫—Ä–∏—Ç–µ—Ä—ñ–π {r.criterion_id}")
#                 print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {r.raw_answer}")
#                 while True:
#                     s_input = input("–û—Ü—ñ–Ω–∫–∞ (0.0‚Äì1.0): ").strip()
#                     try:
#                         s = float(s_input)
#                         if 0.0 <= s <= 1.0:
#                             r.assign_score(s)
#                             break
#                         else:
#                             print("‚ùå –û—Ü—ñ–Ω–∫–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 0.0 –¥–æ 1.0")
#                     except ValueError:
#                         print("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 0.75")
#                 updated = True
#     if updated:
#         for c in candidates:
#             save_json(c.to_dict(), os.path.join("data", "candidates", f"{c.id}.json"))
#         print("‚úÖ –û—Ü—ñ–Ω–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
#     else:
#         print("‚úî –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.")
#
#
# # def run_recruiter_cli():
# #     print("\nüßë‚Äçüíº –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞")
# #     print("1. –î–æ–¥–∞—Ç–∏ –∫—Ä–∏—Ç–µ—Ä—ñ–π")
# #     print("2. –î–æ–¥–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é")
# #     print("3. –û—Ü—ñ–Ω–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤")
# #     print("4. –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ CSV –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π")
# #     print("0. –í–∏–π—Ç–∏")
# #     cmd = input("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ").strip()
# #
# #     base = "data"
# #     if cmd == "1":
# #         create_new_criterion()
# #
# #     elif cmd == "2":
# #         create_new_vacancy()
# #
# #     elif cmd == "3":
# #         candidates = load_all_candidates(os.path.join(base, "candidates"))
# #         updated = False
# #         for c in candidates:
# #             for r in c.responses.values():
# #                 if r.is_pending():
# #                     print(f"\n–ö–∞–Ω–¥–∏–¥–∞—Ç {c.id}, –∫—Ä–∏—Ç–µ—Ä—ñ–π {r.criterion_id}")
# #                     print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {r.raw_answer}")
# #                     while True:
# #                         s_input = input("–û—Ü—ñ–Ω–∫–∞ (0.0‚Äì1.0): ").strip()
# #                         try:
# #                             s = float(s_input)
# #                             if 0.0 <= s <= 1.0:
# #                                 r.assign_score(s)
# #                                 break
# #                             else:
# #                                 print("‚ùå –û—Ü—ñ–Ω–∫–∞ –º–∞—î –±—É—Ç–∏ –≤—ñ–¥ 0.0 –¥–æ 1.0")
# #                         except ValueError:
# #                             print("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ, –Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 0.75")
# #                     updated = True
# #         if updated:
# #             for c in candidates:
# #                 save_json(c.to_dict(), os.path.join(base, "candidates", f"{c.id}.json"))
# #             print("‚úÖ –û—Ü—ñ–Ω–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")
# #         else:
# #             print("‚úî –ù–µ–º–∞—î –≤—ñ–¥–∫—Ä–∏—Ç–∏—Ö –≤—ñ–¥–ø–æ–≤—ñ–¥–µ–π.")
# #
# #     elif cmd == "4":
# #         cands = load_all_candidates(os.path.join(base, "candidates"))
# #         vacs = load_all_vacancies(os.path.join(base, "vacancies"))
# #         bank = load_criteria_bank(os.path.join(base, "criteria_bank"))
# #         scoring = Scoring()
# #         matrix = scoring.compute_matrix(cands, vacs, bank)
# #         scoring.export_to_csv(matrix, os.path.join(base, "results", "matrix.csv"))
# #
# #     elif cmd == "0":
# #         return
# #
# #     else:
# #         print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")
# #
# #     run_recruiter_cli()
#
#
# def run_recruiter_cli():
#     # print("\nüßë‚Äçüíº –í—Ö—ñ–¥ –¥–æ —Å–∏—Å—Ç–µ–º–∏ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞")
#     # recruiter_id = input("–í–∞—à ID: ").strip()
#     # recruiter_name = input("–í–∞—à–µ —ñ–º‚Äô—è: ").strip()
#     # recruiter = Recruiter(recruiter_id, recruiter_name)
#
#     print("\nüîê –í—Ö—ñ–¥ –∞–±–æ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—è")
#     print("1. –£–≤—ñ–π—Ç–∏")
#     print("2. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è")
#
#     choice = input("‚Üí ").strip()
#     if choice == "2":
#         recruiter_id = generate_next_id("data/recruiters", "R")
#         name = input("–í–∞—à–µ —ñ–º‚Äô—è: ").strip()
#         password = input("–ü—Ä–∏–¥—É–º–∞–π—Ç–µ –ø–∞—Ä–æ–ª—å: ").strip()
#         recruiter = Recruiter(recruiter_id, name, password)
#         save_recruiter(recruiter, "data/recruiters")
#         print(f"‚úÖ –†–µ–∫—Ä—É—Ç–µ—Ä –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –∑ ID {recruiter_id}")
#     elif choice == "1":
#         recruiter_id = input("–í–∞—à ID: ").strip()
#         password = input("–ü–∞—Ä–æ–ª—å: ").strip()
#         path = os.path.join("data/recruiters", f"{recruiter_id}.json")
#         if not os.path.exists(path):
#             print("‚ùå –†–µ–∫—Ä—É—Ç–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∏–π.")
#             return
#         data = load_json(path)
#         if data["password"] != password:
#             print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å.")
#             return
#         recruiter = Recruiter.from_dict(data)
#
#     base = "data"
#
#     while True:
#         print("\nüßë‚Äçüíº –Ü–Ω—Ç–µ—Ä—Ñ–µ–π—Å —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞")
#         print("1. –î–æ–¥–∞—Ç–∏ –∫—Ä–∏—Ç–µ—Ä—ñ–π")
#         print("2. –î–æ–¥–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é")
#         print("3. –û—Ü—ñ–Ω–∏—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤")
#         print("4. –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ CSV –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ—Å—Ç–µ–π")
#         print("5. –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—ó –≤–∞–∫–∞–Ω—Å—ñ—ó")
#         print("0. –í–∏–π—Ç–∏")
#         cmd = input("–û–±–µ—Ä—ñ—Ç—å –¥—ñ—é: ").strip()
#
#         if cmd == "1":
#             create_new_criterion()
#
#         elif cmd == "2":
#             create_new_vacancy(recruiter)
#
#         elif cmd == "3":
#             evaluate_candidates(recruiter)
#
#         elif cmd == "4":
#             cands = load_all_candidates(os.path.join(base, "candidates"))
#             vacs = load_all_vacancies(os.path.join(base, "vacancies"))
#             bank = load_criteria_bank(os.path.join(base, "criteria_bank"))
#
#             # –§—ñ–ª—å—Ç—Ä–∞—Ü—ñ—è –≤–∞–∫–∞–Ω—Å—ñ–π –ª–∏—à–µ —Ü—å–æ–≥–æ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞
#             vacs = [v for v in vacs if v.recruiter_id == recruiter.id]
#             scoring = Scoring()
#             matrix = scoring.compute_matrix(cands, vacs, bank)
#             scoring.export_to_csv(matrix, os.path.join(base, "results", f"matrix_{recruiter.id}.csv"))
#
#         elif cmd == "5":
#             my_vacs = [v for v in load_all_vacancies("data/vacancies") if v.recruiter_id == recruiter.id]
#             if not my_vacs:
#                 print("‚Ñπ –£ –≤–∞—Å —â–µ –Ω–µ–º–∞—î —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö –≤–∞–∫–∞–Ω—Å—ñ–π.")
#             for v in my_vacs:
#                 print(f"\nüìå {v.id}: {v.title}")
#                 for cid, cfg in v.active_criteria.items():
#                     print(f" - {cid}: –≤–∞–≥–∞ {cfg['weight']}")
#
#         elif cmd == "0":
#             return
#
#         else:
#             print("‚ùå –ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞.")

import os
import hashlib
from utils.io import (
    load_all_candidates, load_all_vacancies, load_criteria_bank,
    save_json, load_json, generate_next_id
)
from models.recruiter import Recruiter
from models.vacancy import Vacancy
from models.criteria import Criteria
from models.scoring import Scoring


def hash_password(password):
    return hashlib.sha256(password.encode()).hexdigest()


def load_all_recruiters(path="data/recruiters"):
    recruiters = {}
    for fname in os.listdir(path):
        if fname.endswith(".json"):
            data = load_json(os.path.join(path, fname))
            recruiters[data["id"]] = data
    return recruiters


def login_or_register():
    recruiters = load_all_recruiters()
    while True:
        print("\nüßë‚Äçüíº –í—Ö—ñ–¥ –¥–æ —Å–∏—Å—Ç–µ–º–∏")
        print("1. –£–≤—ñ–π—Ç–∏")
        print("2. –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—è")
        print("0. –í–∏–π—Ç–∏")

        choice = input("‚Üí ").strip()
        if choice == "1":
            recruiter = authorize_recruiter(recruiters)
            if recruiter:
                return recruiter
        elif choice == "2":
            recruiter = register_recruiter(recruiters)
            if recruiter:
                return recruiter
        elif choice == "0":
            return None
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")


def register_recruiter(recruiters):
    while True:
        name = input("\n–í–∞—à–µ —ñ–º‚Äô—è (–∞–±–æ 0 –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è): ").strip()
        if name == "0":
            return None
        if any(r["name"] == name for r in recruiters.values()):
            print("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º —É–∂–µ —ñ—Å–Ω—É—î.")
            continue
        password = input("–í—Å—Ç–∞–Ω–æ–≤—ñ—Ç—å –ø–∞—Ä–æ–ª—å: ").strip()
        rid = generate_next_id("data/recruiters", "R")
        hashed = hash_password(password)
        data = {"id": rid, "name": name, "password": hashed}
        save_json(data, os.path.join("data/recruiters", f"{rid}.json"))
        print(f"‚úÖ –†–µ–∫—Ä—É—Ç–µ—Ä –∑–∞—Ä–µ—î—Å—Ç—Ä–æ–≤–∞–Ω–∏–π –∑ ID {rid}")
        return Recruiter(rid, name)


def authorize_recruiter(recruiters):
    while True:
        name = input("\n–í–∞—à–µ —ñ–º‚Äô—è (–∞–±–æ 0 –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è): ").strip()
        if name == "0":
            return None

        # –®—É–∫–∞—î–º–æ —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ –∑–∞ —ñ–º‚Äô—è–º
        found = next((r for r in recruiters.values() if r["name"] == name), None)
        if not found:
            print("‚ùå –ö–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –∑ —Ç–∞–∫–∏–º —ñ–º–µ–Ω–µ–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            continue

        # –ó–∞–ø–∏—Ç—É—î–º–æ –ø–∞—Ä–æ–ª—å –∑ –º–æ–∂–ª–∏–≤—ñ—Å—Ç—é –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è
        while True:
            password = input("–ü–∞—Ä–æ–ª—å (–∞–±–æ 0 –¥–ª—è –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è): ").strip()
            if password == "0":
                break  # –Ω–∞–∑–∞–¥ –¥–æ –≤–≤–µ–¥–µ–Ω–Ω—è —ñ–º–µ–Ω—ñ
            if found["password"] == hash_password(password):
                print(f"‚úÖ –£—Å–ø—ñ—à–Ω–∏–π –≤—Ö—ñ–¥.\n\n–í–∞—à ID: {found['id']}")
                return Recruiter(found["id"], found["name"])
            else:
                print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –ø–∞—Ä–æ–ª—å.")


def create_new_criterion():
    print("\nüìã –î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä—ñ—é")
    cid = input("–ù–∞–∑–≤–∞ –∫—Ä–∏—Ç–µ—Ä—ñ—é: ").strip()
    question = input("–¢–µ–∫—Å—Ç –∑–∞–ø–∏—Ç–∞–Ω–Ω—è: ").strip()

    print("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∫—Ä–∏—Ç–µ—Ä—ñ—é:")
    type_options = ["scale", "category", "manual"]
    for i, t in enumerate(type_options, 1):
        print(f"{i}. {t}")
    while True:
        t_index = input("‚Üí ").strip()
        if t_index.isdigit() and 1 <= int(t_index) <= len(type_options):
            ctype = type_options[int(t_index) - 1]
            break
        else:
            print("‚ùå –í–≤–µ–¥—ñ—Ç—å 1, 2 –∞–±–æ 3.")

    options = None
    if ctype == "category":
        print("–í–≤–µ–¥—ñ—Ç—å –≤–∞—Ä—ñ–∞–Ω—Ç–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ —Ç–∞ —ó—Ö –æ—Ü—ñ–Ω–∫–∏ –≤—ñ–¥ 0 –¥–æ 1. Enter ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç–∏:")
        options = {}
        while True:
            label = input("–í–∞—Ä—ñ–∞–Ω—Ç –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ").strip()
            if not label:
                break
            while True:
                score_input = input(f"–û—Ü—ñ–Ω–∫–∞ –¥–ª—è '{label}': ").strip()
                try:
                    score = float(score_input)
                    if 0.0 <= score <= 1.0:
                        options[label] = score
                        break
                    else:
                        print("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ –≤—ñ–¥ 0.0 –¥–æ 1.0")
                except ValueError:
                    print("‚ùå –í–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ 0.5)")

    elif ctype == "scale":
        print("–©–æ –∫—Ä–∞—â–µ: –±—ñ–ª—å—à–∞ –æ—Ü—ñ–Ω–∫–∞ —á–∏ –º–µ–Ω—à–∞?")
        print("1. –ë—ñ–ª—å—à–∞")
        print("2. –ú–µ–Ω—à–∞")
        while True:
            direction = input("‚Üí ").strip()
            if direction == "1":
                options = {str(i): round(i * 0.2, 2) for i in range(1, 6)}
                break
            elif direction == "2":
                options = {str(i): round(1.2 - i * 0.2, 2) for i in range(1, 6)}
                break
            else:
                print("‚ùå –í–≤–µ–¥—ñ—Ç—å 1 –∞–±–æ 2")

    crit = Criteria(cid, question, ctype, options)
    save_json(crit.to_dict(), os.path.join("data", "criteria_bank", f"{cid}.json"))
    print(f"‚úÖ –ö—Ä–∏—Ç–µ—Ä—ñ–π '{cid}' –¥–æ–¥–∞–Ω–æ.")
    return cid


def finalize_vacancy(vid, title, active_criteria, recruiter_id):
    vacancy = Vacancy(vid, title, active_criteria, recruiter_id)
    save_json(vacancy.to_dict(), os.path.join("data", "vacancies", f"{vid}.json"))
    print(f"‚úÖ –í–∞–∫–∞–Ω—Å—ñ—é {vid} –∑–±–µ—Ä–µ–∂–µ–Ω–æ.")


def create_new_vacancy(recruiter):
    vid = generate_next_id("data/vacancies", "V")
    print(f"\nID –≤–∞–∫–∞–Ω—Å—ñ—ó: {vid}")
    title = input("–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –≤–∞–∫–∞–Ω—Å—ñ—ó: ").strip()
    criteria_bank = load_criteria_bank("data/criteria_bank")
    active_criteria = {}

    while True:
        print("\n–û–±–µ—Ä—ñ—Ç—å –∫—Ä–∏—Ç–µ—Ä—ñ–π:")
        all_criteria = list(criteria_bank.items())
        for i, (cid, crit) in enumerate(all_criteria, 1):
            print(f"{i}. {cid} ({crit.type})")
        print("0. ‚ûï –î–æ–¥–∞—Ç–∏ –Ω–æ–≤–∏–π")
        print("q. ‚ùå –ó–∞–≤–µ—Ä—à–∏—Ç–∏")

        choice = input("‚Üí ").strip().lower()
        if choice == "0":
            create_new_criterion()
            criteria_bank = load_criteria_bank("data/criteria_bank")
            continue
        elif choice == "q":
            if not active_criteria:
                print("‚ö† –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ: –∂–æ–¥–Ω–æ–≥–æ –∫—Ä–∏—Ç–µ—Ä—ñ—é –Ω–µ –≤–∏–±—Ä–∞–Ω–æ.")
                return
            return finalize_vacancy(vid, title, active_criteria, recruiter.id)
        elif choice.isdigit() and 1 <= int(choice) <= len(all_criteria):
            cid, crit = all_criteria[int(choice) - 1]
            print(f"\nüìå {cid} ({crit.type}) ‚Äî {crit.question}")
            if crit.options:
                print("–í–∞—Ä—ñ–∞–Ω—Ç–∏:")
                for k, v in crit.options.items():
                    print(f"  - {k}: {v}")
            print("\n1. –î–æ–¥–∞—Ç–∏ –¥–æ –≤–∞–∫–∞–Ω—Å—ñ—ó\n2. –ù–∞–∑–∞–¥")
            act = input("‚Üí ").strip()
            if act == "1":
                while True:
                    w = input("–í–∞–≥–∞ (1‚Äì5): ").strip()
                    if w.isdigit() and 1 <= int(w) <= 5:
                        active_criteria[cid] = {"active": 1, "weight": int(w)}
                        break
                    print("‚ùå –ù–µ–≤—ñ—Ä–Ω–µ –∑–Ω–∞—á–µ–Ω–Ω—è.")
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä.")


def evaluate_candidates(recruiter):
    candidates = load_all_candidates("data/candidates")
    vacancies = load_all_vacancies("data/vacancies")
    relevant_criteria = set()
    for v in vacancies:
        if v.recruiter_id == recruiter.id:
            relevant_criteria.update(v.get_criteria_ids())

    updated = False
    for c in candidates:
        for r in c.responses.values():
            if r.is_pending() and r.criterion_id in relevant_criteria:
                print(f"\n–ö–∞–Ω–¥–∏–¥–∞—Ç {c.id}, –∫—Ä–∏—Ç–µ—Ä—ñ–π {r.criterion_id}")
                print(f"–í—ñ–¥–ø–æ–≤—ñ–¥—å: {r.raw_answer}")
                while True:
                    s = input("–û—Ü—ñ–Ω–∫–∞ (0.0‚Äì1.0): ").strip()
                    try:
                        val = float(s)
                        if 0 <= val <= 1:
                            r.assign_score(val)
                            updated = True
                            break
                        else:
                            print("‚ùå –í–≤–µ–¥—ñ—Ç—å –∑–Ω–∞—á–µ–Ω–Ω—è –≤—ñ–¥ 0 –¥–æ 1")
                    except:
                        print("‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–µ —á–∏—Å–ª–æ")
    if updated:
        for c in candidates:
            save_json(c.to_dict(), f"data/candidates/{c.id}.json")
        print("‚úÖ –ó–±–µ—Ä–µ–∂–µ–Ω–æ.")
    else:
        print("\n‚úî –û—Ü—ñ–Ω—é–≤–∞—Ç–∏ –Ω—ñ—á–æ–≥–æ.")


def view_recruiter_vacancies(recruiter):
    vacancies = load_all_vacancies("data/vacancies")
    print(f"\nüìÑ –í–∞–∫–∞–Ω—Å—ñ—ó —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞ {recruiter.id}:")
    count = 0
    for v in vacancies:
        if v.recruiter_id == recruiter.id:
            print(f"- {v.id}: {v.title}")
            count += 1
    if count == 0:
        print(" (–Ω–µ–º–∞—î –≤–∞–∫–∞–Ω—Å—ñ–π)")


def run_recruiter_cli():
    recruiter = login_or_register()
    if recruiter is None:
        print("üö™ –í–∏—Ö—ñ–¥ —ñ–∑ —Å–∏—Å—Ç–µ–º–∏.")
        return

    while True:
        print("\nüßë‚Äçüíº –ú–µ–Ω—é —Ä–µ–∫—Ä—É—Ç–µ—Ä–∞")
        print("1. –î–æ–¥–∞—Ç–∏ –∫—Ä–∏—Ç–µ—Ä—ñ–π")
        print("2. –î–æ–¥–∞—Ç–∏ –≤–∞–∫–∞–Ω—Å—ñ—é")
        print("3. –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –º–æ—ó –≤–∞–∫–∞–Ω—Å—ñ—ó")
        print("4. –û—Ü—ñ–Ω–∏—Ç–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç—ñ–≤")
        print("5. –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ CSV")
        print("0. –í–∏–π—Ç–∏")

        cmd = input("‚Üí ").strip()
        if cmd == "1":
            create_new_criterion()
        elif cmd == "2":
            create_new_vacancy(recruiter)
        elif cmd == "3":
            view_recruiter_vacancies(recruiter)
        elif cmd == "4":
            evaluate_candidates(recruiter)
        elif cmd == "5":
            scoring = Scoring()
            cands = load_all_candidates("data/candidates")
            vacs = load_all_vacancies("data/vacancies")
            bank = load_criteria_bank("data/criteria_bank")
            own_vacs = [v for v in vacs if v.recruiter_id == recruiter.id]
            matrix = scoring.compute_matrix(cands, own_vacs, bank)
            scoring.export_to_csv(matrix, f"data/results/matrix_{recruiter.id}.csv")
        elif cmd == "0":
            break
        else:
            print("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –∫–æ–º–∞–Ω–¥–∞.")
